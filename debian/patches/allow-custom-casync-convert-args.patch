From: Christopher Obbard <chris.obbard@collabora.com>
Date: Mon, 2 Mar 2020 11:19:01 +0000
Subject: src/bundle: allow custom casync convert args

Allow custom arguments to the casync calls made during
bundle casync conversion using --casync-args

Signed-off-by: Christopher Obbard <chris.obbard@collabora.com>
Origin: upstream, https://github.com/rauc/rauc/commit/f9a65254be515658d8004149722a860e61be0bf4
---
 include/context.h |  3 ++-
 src/bundle.c      | 32 ++++++++++++++++++++++++++++++++
 src/context.c     |  2 ++
 src/main.c        |  4 ++++
 4 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/include/context.h b/include/context.h
index 8b9499e..75e20fa 100644
--- a/include/context.h
+++ b/include/context.h
@@ -34,6 +34,7 @@ typedef struct {
 	gchar *keyringpath;
 	gchar *keyringdirectory;
 	gchar *signing_keyringpath;
+	gchar *casync_args;
 	gchar **intermediatepaths;
 	/* optional global mount prefix overwrite */
 	gchar *mountprefix;
@@ -124,4 +125,4 @@ void r_context_register_progress_callback(progress_callback progress_cb);
 
 RaucContext *r_context_conf(void);
 const RaucContext *r_context(void);
-void r_context_clean(void);
\ No newline at end of file
+void r_context_clean(void);
diff --git a/src/bundle.c b/src/bundle.c
index 9e73825..e74e7a6 100644
--- a/src/bundle.c
+++ b/src/bundle.c
@@ -139,6 +139,21 @@ static gboolean casync_make_arch(const gchar *idxpath, const gchar *contentpath,
 		g_ptr_array_add(iargs, g_strdup("--store"));
 		g_ptr_array_add(iargs, g_strdup(store));
 	}
+
+	if (r_context()->casync_args != NULL) {
+		g_auto(GStrv) casync_argvp = NULL;
+		res = g_shell_parse_argv(r_context()->casync_args, NULL, &casync_argvp, &ierror);
+		if (!res) {
+			g_propagate_prefixed_error(
+					error,
+					ierror,
+					"Failed to parse casync extra args: ");
+			goto out;
+		}
+		for (gchar **casync_args = casync_argvp; *casync_args != NULL; casync_args++) {
+			g_ptr_array_add(iargs, g_strdup(*casync_args));
+		}
+	}
 	g_ptr_array_add(iargs, NULL);
 
 	/* Outer process calll */
@@ -154,6 +169,7 @@ static gboolean casync_make_arch(const gchar *idxpath, const gchar *contentpath,
 				error,
 				ierror,
 				"Failed to start casync: ");
+		res = FALSE;
 		goto out;
 	}
 
@@ -186,6 +202,21 @@ static gboolean casync_make_blob(const gchar *idxpath, const gchar *contentpath,
 		g_ptr_array_add(args, g_strdup("--store"));
 		g_ptr_array_add(args, g_strdup(store));
 	}
+
+	if (r_context()->casync_args != NULL) {
+		g_auto(GStrv) casync_argvp = NULL;
+		res = g_shell_parse_argv(r_context()->casync_args, NULL, &casync_argvp, &ierror);
+		if (!res) {
+			g_propagate_prefixed_error(
+					error,
+					ierror,
+					"Failed to parse casync extra args: ");
+			goto out;
+		}
+		for (gchar **casync_args = casync_argvp; *casync_args != NULL; casync_args++) {
+			g_ptr_array_add(args, g_strdup(*casync_args));
+		}
+	}
 	g_ptr_array_add(args, NULL);
 
 	sproc = r_subprocess_newv(args, G_SUBPROCESS_FLAGS_STDOUT_SILENCE, &ierror);
@@ -194,6 +225,7 @@ static gboolean casync_make_blob(const gchar *idxpath, const gchar *contentpath,
 				error,
 				ierror,
 				"Failed to start casync: ");
+		res = FALSE;
 		goto out;
 	}
 
diff --git a/src/context.c b/src/context.c
index 5382fdf..33ec19e 100644
--- a/src/context.c
+++ b/src/context.c
@@ -635,11 +635,13 @@ void r_context_clean(void)
 		g_free(context->keyringpath);
 		g_free(context->keyringdirectory);
 		g_free(context->signing_keyringpath);
+		g_free(context->casync_args);
 		context->certpath = NULL;
 		context->keypath = NULL;
 		context->keyringpath = NULL;
 		context->keyringdirectory = NULL;
 		context->signing_keyringpath = NULL;
+		context->casync_args = NULL;
 
 		if (context->config) {
 			context->config->keyring_path = NULL;
diff --git a/src/main.c b/src/main.c
index cf985db..3954cec 100644
--- a/src/main.c
+++ b/src/main.c
@@ -30,6 +30,7 @@ gboolean info_noverify, info_dumpcert = FALSE;
 gboolean status_detailed = FALSE;
 gchar *output_format = NULL;
 gchar *signing_keyring = NULL;
+gchar *casync_args = NULL;
 
 static gchar* make_progress_line(gint percentage)
 {
@@ -1719,6 +1720,7 @@ GOptionEntry entries_resign[] = {
 
 GOptionEntry entries_convert[] = {
 	{"signing-keyring", '\0', 0, G_OPTION_ARG_FILENAME, &signing_keyring, "verification keyring file", "PEMFILE"},
+	{"casync-args", '\0', 0, G_OPTION_ARG_STRING, &casync_args, "casync extra args", "ARGS"},
 	{0}
 };
 
@@ -1911,6 +1913,8 @@ static void cmdline_handler(int argc, char **argv)
 			r_context_conf()->keyringpath = keyring;
 		if (signing_keyring)
 			r_context_conf()->signing_keyringpath = signing_keyring;
+		if (casync_args)
+			r_context_conf()->casync_args = casync_args;
 		if (intermediate)
 			r_context_conf()->intermediatepaths = intermediate;
 		if (mount)
