From: Enrico Jorns <ejo@pengutronix.de>
Date: Mon, 9 Sep 2019 13:03:01 +0200
Subject: [PATCH] test/install: fix test for undefined behavior in slot
 selection handling

For the triple-redundancy rootfs.0, rootfs.1, rootfs.2 (including their
childs), we have rootfs.0 set to 'active' so far and thus both rootfs.2
and rootfs.2 being detected as 'inactive'.

For this case, there is still no real definition of when or whether to select
rootfs.1 or rootfs.2.

Prior to this, the test checked for the selected slot being rootfs.1
which was valid for the concrete implementation, but mainly depending on
the order that was given by the GHashTable (iterator) implementation.

In recent glib version this changed resulting in rootfs.2 being selected
instead.

We adapt the test for checking correctly for both cases.

Signed-off-by: Enrico Jorns <ejo@pengutronix.de>
Origin: https://github.com/rauc/rauc/pull/476
---
 test/install.c | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/test/install.c b/test/install.c
index ae7129aba7f2..b28755d302de 100644
--- a/test/install.c
+++ b/test/install.c
@@ -279,9 +279,19 @@ filename=bootloader.img";
 	g_assert_true(g_hash_table_contains(tgrp, "prebootloader"));
 	//Deactivated check as the actual behavior is GHashTable-implementation-defined
 	//g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "rescue"))->name, ==, "rescue.0");
-	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "rootfs"))->name, ==, "rootfs.1");
-	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "appfs"))->name, ==, "appfs.1");
-	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "demofs"))->name, ==, "demofs.1");
+	/* We need to assure that the algorithm did not select the active group '0' */
+	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "rootfs"))->name, !=, "rootfs.0");
+	/* The algorithm could select either group '1' or group '2'. The actual
+	 * selection is still GHashTable-implementation-defined.*/
+	if (g_strcmp0(((RaucSlot*)g_hash_table_lookup(tgrp, "rootfs"))->name, "rootfs.1") == 0) {
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "rootfs"))->name, ==, "rootfs.1");
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "appfs"))->name, ==, "appfs.1");
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "demofs"))->name, ==, "demofs.1");
+	} else {
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "rootfs"))->name, ==, "rootfs.2");
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "appfs"))->name, ==, "appfs.2");
+		g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "demofs"))->name, ==, "demofs.2");
+	}
 	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "bootloader"))->name, ==, "bootloader.0");
 	g_assert_cmpstr(((RaucSlot*)g_hash_table_lookup(tgrp, "prebootloader"))->name, ==, "prebootloader.0");
 	g_assert_cmpint(g_hash_table_size(tgrp), ==, 6);
-- 
2.23.0

